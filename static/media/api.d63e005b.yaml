openapi: 3.0.0
info:
  title: Glasswall Identity Management Service
  description: These are HTTP endpoints that query the user store and authenticate users
  version: 0.1.9
servers:
  - url: https://localhost:6006
    description: Local K8
  - url: https://localhost:6005
    description: Local debug

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    
  
paths:
  /api/v1/users/authenticate:
    post:
      summary: Authenticates a user with username and password
      description: Authenticates a user with username and password by searching the file store for the required user
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required:
                - "Username"
                - "Password"
              properties:
                Username:
                  type: string
                Password:
                  type: string
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  Id:
                    type: string
                    example: 0127f5eb-da80-4a8b-9fea-6b8c33536745
                    description: This field is a unique identifier for the user
                  Username:
                    type: string
                    example: john.doe@glasswallsolutions.com
                    description: This field is the username that the user has logged in with
                  FirstName:
                    type: string
                    example: John
                    description: This field is the first name of the user
                  LastName:
                    type: string
                    example: Doe
                    description: This field is the last name of the user
                  token:
                    type: string
                    description: This is a JWT bearer token used in authorization of subsequent requests
  /api/v1/users/register:
    post:
      security:
        - bearerAuth: []
      summary: Registers a user with username and password and other metadata
      description: Registers a user with username and password and other metadata. The user is saved to a file store.
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required:
                - "Username"
                - "Password"
                - "FirstName"
                - "LastName"
              properties:
                Username:
                  type: string
                Password:
                  type: string
                FirstName:
                  type: string
                  example: John
                  description: This field is the first name of the user
                LastName:
                  type: string
                  example: Doe
                  description: This field is the last name of the user
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: object
  /api/v1/users:
    get:
      security:
        - bearerAuth: []
      summary: Gets all users metadata
      description: Searches the file store for all users
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      type: string
                      example: 0127f5eb-da80-4a8b-9fea-6b8c33536745
                      description: This field is a unique identifier for the user
                    Username:
                      type: string
                      description: The username the user logs in with
                    FirstName:
                      type: string
                      example: John
                      description: This field is the first name of the user
                    LastName:
                      type: string
                      example: Doe
                      description: This field is the last name of the user
        204:
          description: No Content - No policy was found
  /api/v1/users/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Gets a users metadata
      description: Searches the file store for a user
      parameters:
        - in: path
          name: id
          description: Unique Identifier for the user.
          example: a4484d16-7462-4997-bd84-c74655ac9cd2
          required: true
          schema:
            type: string
            title: ID
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  Id:
                    type: string
                    example: 0127f5eb-da80-4a8b-9fea-6b8c33536745
                    description: This field is a unique identifier for the user
                  Username:
                    type: string
                    description: The username the user logs in with
                  FirstName:
                    type: string
                    example: John
                    description: This field is the first name of the user
                  LastName:
                    type: string
                    example: Doe
                    description: This field is the last name of the user
        204:
          description: No Content - No policy was found
    put:
      security:
        - bearerAuth: []
      summary: Updates a user details
      description: Finds the user in the store and updates their details
      parameters:
        - in: path
          name: id
          description: Unique Identifier for the user.
          example: a4484d16-7462-4997-bd84-c74655ac9cd2
          required: true
          schema:
            type: string
            title: ID
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required:
                - "Username"
                - "FirstName"
                - "LastName"
              properties:
                Username:
                  type: string
                Password:
                  type: string
                FirstName:
                  type: string
                  example: John
                  description: This field is the first name of the user
                LastName:
                  type: string
                  example: Doe
                  description: This field is the last name of the user
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: object
    delete:
      security:
        - bearerAuth: []
      summary: Deletes a user details
      description: Finds the user in the store and deletes their details
      parameters:
        - in: path
          name: id
          description: Unique Identifier for the user.
          example: a4484d16-7462-4997-bd84-c74655ac9cd2
          required: true
          schema:
            type: string
            title: ID
      responses:
        200:
          description: OK - The request was successful
          content:
            "application/json":
              schema:
                type: object